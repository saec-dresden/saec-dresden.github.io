"use strict";var semver=require("semver");var shell=require("shelljs");module.exports=function(b){b.registerTask("bump","Bump the version property of a JSON file.",function(){var j=["major","minor","patch","prerelease"];var g=[];this.args.forEach(function(m){var l=[];j.forEach(function(n){if(n.indexOf(m)===0){l.push(n)}});if(l.length===0){b.log.error('Error: mode "'+m+'" does not match any known modes.')}else{if(l.length>1){b.log.error('Error: mode "'+m+'" is ambiguous (possibly: '+l.join(", ")+").")}else{g.push(l[0])}}});if(this.errorCount===0&&g.length===0){b.log.error("Error: no modes specified.")}if(this.errorCount>0){b.log.error("Valid modes are: "+j.join(", ")+".");throw new Error("Use valid modes (or unambiguous mode abbreviations).")}var i=this.options({filepaths:["package.json"],syncVersions:false,commit:true,commitMessage:"Bumping version to {%= version %}.",tag:true,tagName:"v{%= version %}",tagMessage:"Version {%= version %}",tagPrerelease:false,});var f=Array.isArray(i.filepaths)?i.filepaths:[i.filepaths];var k={};f.forEach(function(l){var n=b.file.readJSON(l);var p=n.version;var m=Object.keys(k)[0];if(i.syncVersions&&m){n.version=m}g.forEach(function(o){var q=n.version;var r=semver.parse(n.version);r.inc(o);n.version=String(r);if(/-/.test(q)&&o==="patch"){n.version=n.version.replace(/\d+$/,function(s){return s-1})}if(!/-/.test(q)&&o==="prerelease"){r.inc("patch");r.inc("prerelease");n.version=String(r)}});if(k[p]){k[p].filepaths.push(l)}else{k[p]={version:n.version,filepaths:[l]}}b.log.write("Bumping version in "+l+" from "+p+" to "+n.version+"...");b.file.write(l,JSON.stringify(n,null,2));b.log.ok()});if(i.commit){Object.keys(k).forEach(function(m){var l=k[m];a(l.filepaths,c(i.commitMessage,{version:l.version,origVersion:m}))})}var h=k[Object.keys(k)[0]].version;if(i.tag){if(i.tagPrerelease||g.indexOf("prerelease")===-1){e(c(i.tagName,{version:h}),c(i.tagMessage,{version:h}))}else{b.log.writeln("Not tagging (prerelease version).")}}if(this.errorCount>0){b.warn("There were errors.")}});b.template.addDelimiters("bump","{%","%}");function c(g,f){return b.template.process(g,{delimiters:"bump",data:f,})}function a(f,g){b.log.writeln("Committing "+f.join(", ")+" with message: "+g);d("git commit -m '"+g+"' '"+f.join("' '")+"'")}function e(g,f){b.log.writeln("Tagging "+g+" with message: "+f);d("git tag '"+g+"' -m '"+f+"'")}function d(f){if(b.option("no-write")){b.verbose.writeln("Not actually running: "+f)}else{b.verbose.writeln("Running: "+f);var g=shell.exec(f,{silent:true});if(g.code!==0){b.log.error("Error ("+g.code+") "+g.output)}}}};