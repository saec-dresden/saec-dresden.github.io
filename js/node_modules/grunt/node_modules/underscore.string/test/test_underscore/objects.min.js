$(document).ready(function(){module("Objects");test("objects: keys",function(){var d=/object/;equals(_.keys({one:1,two:2}).join(", "),"one, two","can extract the keys from an object");var c=[];c[1]=0;equals(_.keys(c).join(", "),"1","is not fooled by sparse arrays; see issue #95");raises(function(){_.keys(null)},d,"throws an error for `null` values");raises(function(){_.keys(void 0)},d,"throws an error for `undefined` values");raises(function(){_.keys(1)},d,"throws an error for number primitives");raises(function(){_.keys("a")},d,"throws an error for string primitives");raises(function(){_.keys(true)},d,"throws an error for boolean primitives")});test("objects: values",function(){equals(_.values({one:1,two:2}).join(", "),"1, 2","can extract the values from an object")});test("objects: functions",function(){var d={a:"dash",b:_.map,c:(/yo/),d:_.reduce};ok(_.isEqual(["b","d"],_.functions(d)),"can grab the function names of any passed-in object");var c=function(){};c.prototype.run=function(){};equals(_.functions(new c).join(""),"run","also looks up functions on the prototype")});test("objects: extend",function(){var c;equals(_.extend({},{a:"b"}).a,"b","can extend an object with the attributes of another");equals(_.extend({a:"x"},{a:"b"}).a,"b","properties in source override destination");equals(_.extend({x:"x"},{a:"b"}).x,"x","properties not in source dont get overriden");c=_.extend({x:"x"},{a:"a"},{b:"b"});ok(_.isEqual(c,{x:"x",a:"a",b:"b"}),"can extend from multiple source objects");c=_.extend({x:"x"},{a:"a",x:2},{a:"b"});ok(_.isEqual(c,{x:2,a:"b"}),"extending from multiple source objects last property trumps");c=_.extend({},{a:void 0,b:null});equals(_.keys(c).join(""),"ab","extend does not copy undefined values")});test("objects: defaults",function(){var d;var c={zero:0,one:1,empty:"",nan:NaN,string:"string"};_.defaults(c,{zero:1,one:10,twenty:20});equals(c.zero,0,"value exists");equals(c.one,1,"value exists");equals(c.twenty,20,"default applied");_.defaults(c,{empty:"full"},{nan:"nan"},{word:"word"},{word:"dog"});equals(c.empty,"","value exists");ok(_.isNaN(c.nan),"NaN isn't overridden");equals(c.word,"word","new value is added, first one wins")});test("objects: clone",function(){var d={name:"moe",lucky:[13,27,34]};var c=_.clone(d);equals(c.name,"moe","the clone as the attributes of the original");c.name="curly";ok(c.name=="curly"&&d.name=="moe","clones can change shallow attributes without affecting the original");c.lucky.push(101);equals(_.last(d.lucky),101,"changes to deep attributes are shared with the original");equals(_.clone(undefined),void 0,"non objects should not be changed by clone");equals(_.clone(1),1,"non objects should not be changed by clone");equals(_.clone(null),null,"non objects should not be changed by clone")});test("objects: isEqual",function(){function g(){this.value=1}g.prototype.value=1;function m(){this.value=1}m.prototype.value=2;ok(_.isEqual(null,null),"`null` is equal to `null`");ok(_.isEqual(),"`undefined` is equal to `undefined`");ok(!_.isEqual(0,-0),"`0` is not equal to `-0`");ok(!_.isEqual(-0,0),"Commutative equality is implemented for `0` and `-0`");ok(!_.isEqual(null,undefined),"`null` is not equal to `undefined`");ok(!_.isEqual(undefined,null),"Commutative equality is implemented for `null` and `undefined`");ok(_.isEqual("Curly","Curly"),"Identical string primitives are equal");ok(_.isEqual(new String("Curly"),new String("Curly")),"String objects with identical primitive values are equal");ok(_.isEqual(new String("Curly"),"Curly"),"String primitives and their corresponding object wrappers are equal");ok(_.isEqual("Curly",new String("Curly")),"Commutative equality is implemented for string objects and primitives");ok(!_.isEqual("Curly","Larry"),"String primitives with different values are not equal");ok(!_.isEqual(new String("Curly"),new String("Larry")),"String objects with different primitive values are not equal");ok(!_.isEqual(new String("Curly"),{toString:function(){return"Curly"}}),"String objects and objects with a custom `toString` method are not equal");ok(_.isEqual(75,75),"Identical number primitives are equal");ok(_.isEqual(new Number(75),new Number(75)),"Number objects with identical primitive values are equal");ok(_.isEqual(75,new Number(75)),"Number primitives and their corresponding object wrappers are equal");ok(_.isEqual(new Number(75),75),"Commutative equality is implemented for number objects and primitives");ok(!_.isEqual(new Number(0),-0),"`new Number(0)` and `-0` are not equal");ok(!_.isEqual(0,new Number(-0)),"Commutative equality is implemented for `new Number(0)` and `-0`");ok(!_.isEqual(new Number(75),new Number(63)),"Number objects with different primitive values are not equal");ok(!_.isEqual(new Number(63),{valueOf:function(){return 63}}),"Number objects and objects with a `valueOf` method are not equal");ok(_.isEqual(NaN,NaN),"`NaN` is equal to `NaN`");ok(!_.isEqual(61,NaN),"A number primitive is not equal to `NaN`");ok(!_.isEqual(new Number(79),NaN),"A number object is not equal to `NaN`");ok(!_.isEqual(Infinity,NaN),"`Infinity` is not equal to `NaN`");ok(_.isEqual(true,true),"Identical boolean primitives are equal");ok(_.isEqual(new Boolean,new Boolean),"Boolean objects with identical primitive values are equal");ok(_.isEqual(true,new Boolean(true)),"Boolean primitives and their corresponding object wrappers are equal");ok(_.isEqual(new Boolean(true),true),"Commutative equality is implemented for booleans");ok(!_.isEqual(new Boolean(true),new Boolean),"Boolean objects with different primitive values are not equal");ok(!_.isEqual(true,new Boolean(false)),"Boolean objects are not equal to the boolean primitive `true`");ok(!_.isEqual("75",75),"String and number primitives with like values are not equal");ok(!_.isEqual(new Number(63),new String(63)),"String and number objects with like values are not equal");ok(!_.isEqual(75,"75"),"Commutative equality is implemented for like string and number values");ok(!_.isEqual(0,""),"Number and string primitives with like values are not equal");ok(!_.isEqual(1,true),"Number and boolean primitives with like values are not equal");ok(!_.isEqual(new Boolean(false),new Number(0)),"Boolean and number objects with like values are not equal");ok(!_.isEqual(false,new String("")),"Boolean primitives and string objects with like values are not equal");ok(!_.isEqual(1256450400000,new Date(2009,9,25)),"Dates and their corresponding numeric primitive values are not equal");ok(_.isEqual(new Date(2009,9,25),new Date(2009,9,25)),"Date objects referencing identical times are equal");ok(!_.isEqual(new Date(2009,9,25),new Date(2009,11,13)),"Date objects referencing different times are not equal");ok(!_.isEqual(new Date(2009,11,13),{getTime:function(){return 1260687600000}}),"Date objects and objects with a `getTime` method are not equal");ok(!_.isEqual(new Date("Curly"),new Date("Curly")),"Invalid dates are not equal");ok(!_.isEqual(g,m),"Different functions with identical bodies and source code representations are not equal");ok(_.isEqual(/(?:)/gim,/(?:)/gim),"RegExps with equivalent patterns and flags are equal");ok(!_.isEqual(/(?:)/g,/(?:)/gi),"RegExps with equivalent patterns and different flags are not equal");ok(!_.isEqual(/Moe/gim,/Curly/gim),"RegExps with different patterns and equivalent flags are not equal");ok(!_.isEqual(/(?:)/gi,/(?:)/g),"Commutative equality is implemented for RegExps");ok(!_.isEqual(/Curly/g,{source:"Larry",global:true,ignoreCase:false,multiline:false}),"RegExps and RegExp-like objects are not equal");ok(_.isEqual({},{}),"Empty object literals are equal");ok(_.isEqual([],[]),"Empty array literals are equal");ok(_.isEqual([{}],[{}]),"Empty nested arrays and objects are equal");ok(!_.isEqual({length:0},[]),"Array-like objects and arrays are not equal.");ok(!_.isEqual([],{length:0}),"Commutative equality is implemented for array-like objects");ok(!_.isEqual({},[]),"Object literals and array literals are not equal");ok(!_.isEqual([],{}),"Commutative equality is implemented for objects and arrays");ok(_.isEqual([1,"Larry",true],[1,"Larry",true]),"Arrays containing identical primitives are equal");ok(_.isEqual([/Moe/g,new Date(2009,9,25)],[/Moe/g,new Date(2009,9,25)]),"Arrays containing equivalent elements are equal");var c=[new Number(47),false,"Larry",/Moe/,new Date(2009,11,13),["running","biking",new String("programming")],{a:47}];var d=[new Number(47),false,"Larry",/Moe/,new Date(2009,11,13),["running","biking",new String("programming")],{a:47}];ok(_.isEqual(c,d),"Arrays containing nested arrays and objects are recursively compared");c.forEach=c.map=c.filter=c.every=c.indexOf=c.lastIndexOf=c.some=c.reduce=c.reduceRight=null;d.join=d.pop=d.reverse=d.shift=d.slice=d.splice=d.concat=d.sort=d.unshift=null;ok(_.isEqual(c,d),"Arrays containing equivalent elements and different non-numeric properties are equal");c.push("White Rocks");ok(!_.isEqual(c,d),"Arrays of different lengths are not equal");c.push("East Boulder");d.push("Gunbarrel Ranch","Teller Farm");ok(!_.isEqual(c,d),"Arrays of identical lengths containing different elements are not equal");ok(_.isEqual(Array(3),Array(3)),"Sparse arrays of identical lengths are equal");ok(!_.isEqual(Array(3),Array(6)),"Sparse arrays of different lengths are not equal when both are empty");if(0 in [undefined]){ok(!_.isEqual(Array(3),[undefined,undefined,undefined]),"Sparse and dense arrays are not equal");ok(!_.isEqual([undefined,undefined,undefined],Array(3)),"Commutative equality is implemented for sparse and dense arrays")}ok(_.isEqual({a:"Curly",b:1,c:true},{a:"Curly",b:1,c:true}),"Objects containing identical primitives are equal");ok(_.isEqual({a:/Curly/g,b:new Date(2009,11,13)},{a:/Curly/g,b:new Date(2009,11,13)}),"Objects containing equivalent members are equal");ok(!_.isEqual({a:63,b:75},{a:61,b:55}),"Objects of identical sizes with different values are not equal");ok(!_.isEqual({a:63,b:75},{a:61,c:55}),"Objects of identical sizes with different property names are not equal");ok(!_.isEqual({a:1,b:2},{a:1}),"Objects of different sizes are not equal");ok(!_.isEqual({a:1},{a:1,b:2}),"Commutative equality is implemented for objects");ok(!_.isEqual({x:1,y:undefined},{x:1,z:2}),"Objects with identical keys and different values are not equivalent");c={name:new String("Moe Howard"),age:new Number(77),stooge:true,hobbies:["acting"],film:{name:"Sing a Song of Six Pants",release:new Date(1947,9,30),stars:[new String("Larry Fine"),"Shemp Howard"],minutes:new Number(16),seconds:54}};d={name:new String("Moe Howard"),age:new Number(77),stooge:true,hobbies:["acting"],film:{name:"Sing a Song of Six Pants",release:new Date(1947,9,30),stars:[new String("Larry Fine"),"Shemp Howard"],minutes:new Number(16),seconds:54}};ok(_.isEqual(c,d),"Objects with nested equivalent members are recursively compared");ok(_.isEqual(new g,new g),"Object instances are equal");ok(!_.isEqual(new g,new m),"Objects with different constructors and identical own properties are not equal");ok(!_.isEqual({value:1},new g),"Object instances and objects sharing equivalent properties are not equal");ok(!_.isEqual({value:2},new m),"The prototype chain of objects should not be examined");(c=[]).push(c);(d=[]).push(d);ok(_.isEqual(c,d),"Arrays containing circular references are equal");c.push(new String("Larry"));d.push(new String("Larry"));ok(_.isEqual(c,d),"Arrays containing circular references and equivalent properties are equal");c.push("Shemp");d.push("Curly");ok(!_.isEqual(c,d),"Arrays containing circular references and different properties are not equal");c={abc:null};d={abc:null};c.abc=c;d.abc=d;ok(_.isEqual(c,d),"Objects containing circular references are equal");c.def=75;d.def=75;ok(_.isEqual(c,d),"Objects containing circular references and equivalent properties are equal");c.def=new Number(75);d.def=new Number(63);ok(!_.isEqual(c,d),"Objects containing circular references and different properties are not equal");c=[{abc:null}];d=[{abc:null}];(c[0].abc=c).push(c);(d[0].abc=d).push(d);ok(_.isEqual(c,d),"Cyclic structures are equal");c[0].def="Larry";d[0].def="Larry";ok(_.isEqual(c,d),"Cyclic structures containing equivalent properties are equal");c[0].def=new String("Larry");d[0].def=new String("Curly");ok(!_.isEqual(c,d),"Cyclic structures containing different properties are not equal");c={foo:{b:{foo:{c:{foo:null}}}}};d={foo:{b:{foo:{c:{foo:null}}}}};c.foo.b.foo.c.foo=c;d.foo.b.foo.c.foo=d;ok(_.isEqual(c,d),"Cyclic structures with nested and identically-named properties are equal");ok(!_.isEqual(_({x:1,y:undefined}).chain(),_({x:1,z:2}).chain()),"Chained objects containing different values are not equal");equals(_({x:1,y:2}).chain().isEqual(_({x:1,y:2}).chain()).value(),true,"`isEqual` can be chained");var h={isEqual:function(n){return n.isEqual==this.isEqual},unique:{}};var i={isEqual:h.isEqual,unique:{}};ok(_.isEqual(h,i),"Both objects implement identical `isEqual` methods");ok(_.isEqual(i,h),"Commutative equality is implemented for objects with custom `isEqual` methods");ok(!_.isEqual(h,{}),"Objects that do not implement equivalent `isEqual` methods are not equal");ok(!_.isEqual({},h),"Commutative equality is implemented for objects with different `isEqual` methods");LocalizedString=(function(){function n(o){this.id=o;this.string=(this.id===10)?"Bonjour":""}n.prototype.isEqual=function(o){if(_.isString(o)){return this.string==o}else{if(o instanceof n){return this.id==o.id}}return false};return n})();var j=new LocalizedString(10),k=new LocalizedString(10),l=new LocalizedString(11);ok(_.isEqual(j,k),"comparing same typed instances with same ids");ok(!_.isEqual(j,l),"comparing same typed instances with different ids");ok(_.isEqual(j,"Bonjour"),"comparing different typed instances with same values");ok(_.isEqual("Bonjour",j),"comparing different typed instances with same values");ok(!_.isEqual("Bonjour",l),"comparing two localized strings with different ids");ok(!_.isEqual(j,"Au revoir"),"comparing different typed instances with different values");ok(!_.isEqual("Au revoir",j),"comparing different typed instances with different values");Date.prototype.toJSON=function(){return{_type:"Date",year:this.getUTCFullYear(),month:this.getUTCMonth(),day:this.getUTCDate(),hours:this.getUTCHours(),minutes:this.getUTCMinutes(),seconds:this.getUTCSeconds()}};Date.prototype.isEqual=function(n){var p=this.toJSON();var o=(n instanceof Date)?n.toJSON():n;delete p._type;delete o._type;return _.isEqual(p,o)};var e=new Date();var f={_type:"Date",year:e.getUTCFullYear(),month:e.getUTCMonth(),day:e.getUTCDate(),hours:e.getUTCHours(),minutes:e.getUTCMinutes(),seconds:e.getUTCSeconds()};ok(_.isEqual(f,e),"serialized date matches date");ok(_.isEqual(e,f),"date matches serialized date")});test("objects: isEmpty",function(){ok(!_([1]).isEmpty(),"[1] is not empty");ok(_.isEmpty([]),"[] is empty");ok(!_.isEmpty({one:1}),"{one : 1} is not empty");ok(_.isEmpty({}),"{} is empty");ok(_.isEmpty(new RegExp("")),"objects with prototype properties are empty");ok(_.isEmpty(null),"null is empty");ok(_.isEmpty(),"undefined is empty");ok(_.isEmpty(""),"the empty string is empty");ok(!_.isEmpty("moe"),"but other strings are not");var c={one:1};delete c.one;ok(_.isEmpty(c),"deleting all the keys from an object empties it")});var b=document.createElement("iframe");jQuery(b).appendTo(document.body);var a=b.contentDocument||b.contentWindow.document;a.write("<script>      parent.iElement   = document.createElement('div');      parent.iArguments = (function(){ return arguments; })(1, 2, 3);      parent.iArray     = [1, 2, 3];      parent.iString    = new String('hello');      parent.iNumber    = new Number(100);      parent.iFunction  = (function(){});      parent.iDate      = new Date();      parent.iRegExp    = /hi/;      parent.iNaN       = NaN;      parent.iNull      = null;      parent.iBoolean   = new Boolean(false);      parent.iUndefined = undefined;    </script>");a.close();test("objects: isElement",function(){ok(!_.isElement("div"),"strings are not dom elements");ok(_.isElement($("html")[0]),"the html tag is a DOM element");ok(_.isElement(iElement),"even from another frame")});test("objects: isArguments",function(){var c=(function(){return arguments})(1,2,3);ok(!_.isArguments("string"),"a string is not an arguments object");ok(!_.isArguments(_.isArguments),"a function is not an arguments object");ok(_.isArguments(c),"but the arguments object is an arguments object");ok(!_.isArguments(_.toArray(c)),"but not when it's converted into an array");ok(!_.isArguments([1,2,3]),"and not vanilla arrays.");ok(_.isArguments(iArguments),"even from another frame")});test("objects: isObject",function(){ok(_.isObject(arguments),"the arguments object is object");ok(_.isObject([1,2,3]),"and arrays");ok(_.isObject($("html")[0]),"and DOM element");ok(_.isObject(iElement),"even from another frame");ok(_.isObject(function(){}),"and functions");ok(_.isObject(iFunction),"even from another frame");ok(!_.isObject(null),"but not null");ok(!_.isObject(undefined),"and not undefined");ok(!_.isObject("string"),"and not string");ok(!_.isObject(12),"and not number");ok(!_.isObject(true),"and not boolean");ok(_.isObject(new String("string")),"but new String()")});test("objects: isArray",function(){ok(!_.isArray(arguments),"the arguments object is not an array");ok(_.isArray([1,2,3]),"but arrays are");ok(_.isArray(iArray),"even from another frame")});test("objects: isString",function(){ok(!_.isString(document.body),"the document body is not a string");ok(_.isString([1,2,3].join(", ")),"but strings are");ok(_.isString(iString),"even from another frame")});test("objects: isNumber",function(){ok(!_.isNumber("string"),"a string is not a number");ok(!_.isNumber(arguments),"the arguments object is not a number");ok(!_.isNumber(undefined),"undefined is not a number");ok(_.isNumber(3*4-7/10),"but numbers are");ok(_.isNumber(NaN),"NaN *is* a number");ok(_.isNumber(Infinity),"Infinity is a number");ok(_.isNumber(iNumber),"even from another frame");ok(!_.isNumber("1"),"numeric strings are not numbers")});test("objects: isBoolean",function(){ok(!_.isBoolean(2),"a number is not a boolean");ok(!_.isBoolean("string"),"a string is not a boolean");ok(!_.isBoolean("false"),'the string "false" is not a boolean');ok(!_.isBoolean("true"),'the string "true" is not a boolean');ok(!_.isBoolean(arguments),"the arguments object is not a boolean");ok(!_.isBoolean(undefined),"undefined is not a boolean");ok(!_.isBoolean(NaN),"NaN is not a boolean");ok(!_.isBoolean(null),"null is not a boolean");ok(_.isBoolean(true),"but true is");ok(_.isBoolean(false),"and so is false");ok(_.isBoolean(iBoolean),"even from another frame")});test("objects: isFunction",function(){ok(!_.isFunction([1,2,3]),"arrays are not functions");ok(!_.isFunction("moe"),"strings are not functions");ok(_.isFunction(_.isFunction),"but functions are");ok(_.isFunction(iFunction),"even from another frame")});test("objects: isDate",function(){ok(!_.isDate(100),"numbers are not dates");ok(!_.isDate({}),"objects are not dates");ok(_.isDate(new Date()),"but dates are");ok(_.isDate(iDate),"even from another frame")});test("objects: isRegExp",function(){ok(!_.isRegExp(_.identity),"functions are not RegExps");ok(_.isRegExp(/identity/),"but RegExps are");ok(_.isRegExp(iRegExp),"even from another frame")});test("objects: isNaN",function(){ok(!_.isNaN(undefined),"undefined is not NaN");ok(!_.isNaN(null),"null is not NaN");ok(!_.isNaN(0),"0 is not NaN");ok(_.isNaN(NaN),"but NaN is");ok(_.isNaN(iNaN),"even from another frame")});test("objects: isNull",function(){ok(!_.isNull(undefined),"undefined is not null");ok(!_.isNull(NaN),"NaN is not null");ok(_.isNull(null),"but null is");ok(_.isNull(iNull),"even from another frame")});test("objects: isUndefined",function(){ok(!_.isUndefined(1),"numbers are defined");ok(!_.isUndefined(null),"null is defined");ok(!_.isUndefined(false),"false is defined");ok(!_.isUndefined(NaN),"NaN is defined");ok(_.isUndefined(),"nothing is undefined");ok(_.isUndefined(undefined),"undefined is undefined");ok(_.isUndefined(iUndefined),"even from another frame")});if(window.ActiveXObject){test("objects: IE host objects",function(){var c=new ActiveXObject("Msxml2.DOMDocument.3.0");ok(!_.isNumber(c));ok(!_.isBoolean(c));ok(!_.isNaN(c));ok(!_.isFunction(c));ok(!_.isNull(c));ok(!_.isUndefined(c))})}test("objects: tap",function(){var c=null;var d=function(f){c=f};var e=_.tap(1,d);equals(c,1,"passes tapped object to interceptor");equals(e,1,"returns tapped object");e=_([1,2,3]).chain().map(function(f){return f*2}).max().tap(d).value();ok(e==6&&c==6,"can use tapped objects in a chain")})});