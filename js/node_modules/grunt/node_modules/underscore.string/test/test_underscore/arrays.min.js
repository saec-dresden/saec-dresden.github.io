$(document).ready(function(){module("Arrays");test("arrays: first",function(){equals(_.first([1,2,3]),1,"can pull out the first element of an array");equals(_([1,2,3]).first(),1,'can perform OO-style "first()"');equals(_.first([1,2,3],0).join(", "),"","can pass an index to first");equals(_.first([1,2,3],2).join(", "),"1, 2","can pass an index to first");equals(_.first([1,2,3],5).join(", "),"1, 2, 3","can pass an index to first");var a=(function(){return _.first(arguments)})(4,3,2,1);equals(a,4,"works on an arguments object.");a=_.map([[1,2,3],[1,2,3]],_.first);equals(a.join(","),"1,1","works well with _.map")});test("arrays: rest",function(){var a=[1,2,3,4];equals(_.rest(a).join(", "),"2, 3, 4","working rest()");equals(_.rest(a,0).join(", "),"1, 2, 3, 4","working rest(0)");equals(_.rest(a,2).join(", "),"3, 4","rest can take an index");var b=(function(){return _(arguments).tail()})(1,2,3,4);equals(b.join(", "),"2, 3, 4","aliased as tail and works on arguments object");b=_.map([[1,2,3],[1,2,3]],_.rest);equals(_.flatten(b).join(","),"2,3,2,3","works well with _.map")});test("arrays: initial",function(){equals(_.initial([1,2,3,4,5]).join(", "),"1, 2, 3, 4","working initial()");equals(_.initial([1,2,3,4],2).join(", "),"1, 2","initial can take an index");var a=(function(){return _(arguments).initial()})(1,2,3,4);equals(a.join(", "),"1, 2, 3","initial works on arguments object");a=_.map([[1,2,3],[1,2,3]],_.initial);equals(_.flatten(a).join(","),"1,2,1,2","initial works with _.map")});test("arrays: last",function(){equals(_.last([1,2,3]),3,"can pull out the last element of an array");equals(_.last([1,2,3],0).join(", "),"","can pass an index to last");equals(_.last([1,2,3],2).join(", "),"2, 3","can pass an index to last");equals(_.last([1,2,3],5).join(", "),"1, 2, 3","can pass an index to last");var a=(function(){return _(arguments).last()})(1,2,3,4);equals(a,4,"works on an arguments object");a=_.map([[1,2,3],[1,2,3]],_.last);equals(a.join(","),"3,3","works well with _.map")});test("arrays: compact",function(){equals(_.compact([0,1,false,2,false,3]).length,3,"can trim out all falsy values");var a=(function(){return _(arguments).compact().length})(0,1,false,2,false,3);equals(a,3,"works on an arguments object")});test("arrays: flatten",function(){if(window.JSON){var a=[1,[2],[3,[[[4]]]]];equals(JSON.stringify(_.flatten(a)),"[1,2,3,4]","can flatten nested arrays");equals(JSON.stringify(_.flatten(a,true)),"[1,2,3,[[[4]]]]","can shallowly flatten nested arrays");var b=(function(){return _.flatten(arguments)})(1,[2],[3,[[[4]]]]);equals(JSON.stringify(b),"[1,2,3,4]","works on an arguments object")}});test("arrays: without",function(){var a=[1,2,1,0,3,1,4];equals(_.without(a,0,1).join(", "),"2, 3, 4","can remove all instances of an object");var b=(function(){return _.without(arguments,0,1)})(1,2,1,0,3,1,4);equals(b.join(", "),"2, 3, 4","works on an arguments object");var a=[{one:1},{two:2}];ok(_.without(a,{one:1}).length==2,"uses real object identity for comparisons.");ok(_.without(a,a[0]).length==1,"ditto.")});test("arrays: uniq",function(){var b=[1,2,1,3,1,4];equals(_.uniq(b).join(", "),"1, 2, 3, 4","can find the unique values of an unsorted array");var b=[1,1,1,2,2,3];equals(_.uniq(b,true).join(", "),"1, 2, 3","can find the unique values of a sorted array faster");var b=[{name:"moe"},{name:"curly"},{name:"larry"},{name:"curly"}];var a=function(d){return d.name};equals(_.map(_.uniq(b,false,a),a).join(", "),"moe, curly, larry","can find the unique values of an array using a custom iterator");var a=function(d){return d+1};var b=[1,2,2,3,4,4];equals(_.uniq(b,true,a).join(", "),"1, 2, 3, 4","iterator works with sorted array");var c=(function(){return _.uniq(arguments)})(1,2,1,3,1,4);equals(c.join(", "),"1, 2, 3, 4","works on an arguments object")});test("arrays: intersection",function(){var c=["moe","curly","larry"],a=["moe","groucho"];equals(_.intersection(c,a).join(""),"moe","can take the set intersection of two arrays");equals(_(c).intersection(a).join(""),"moe","can perform an OO-style intersection");var b=(function(){return _.intersection(arguments,a)})("moe","curly","larry");equals(b.join(""),"moe","works on an arguments object")});test("arrays: union",function(){var a=_.union([1,2,3],[2,30,1],[1,40]);equals(a.join(" "),"1 2 3 30 40","takes the union of a list of arrays");var a=_.union([1,2,3],[2,30,1],[1,40,[1]]);equals(a.join(" "),"1 2 3 30 40 1","takes the union of a list of nested arrays")});test("arrays: difference",function(){var a=_.difference([1,2,3],[2,30,40]);equals(a.join(" "),"1 3","takes the difference of two arrays");var a=_.difference([1,2,3,4],[2,30,40],[1,11,111]);equals(a.join(" "),"3 4","takes the difference of three arrays")});test("arrays: zip",function(){var c=["moe","larry","curly"],a=[30,40,50],b=[true];var d=_.zip(c,a,b);equals(String(d),"moe,30,true,larry,40,,curly,50,","zipped together arrays of different lengths")});test("arrays: indexOf",function(){var c=[1,2,3];c.indexOf=null;equals(_.indexOf(c,2),1,"can compute indexOf, even without the native function");var d=(function(){return _.indexOf(arguments,2)})(1,2,3);equals(d,1,"works on an arguments object");equals(_.indexOf(null,2),-1,"handles nulls properly");var c=[10,20,30,40,50],b=35;var a=_.indexOf(c,b,true);equals(a,-1,"35 is not in the list");c=[10,20,30,40,50];b=40;a=_.indexOf(c,b,true);equals(a,3,"40 is in the list");c=[1,40,40,40,40,40,40,40,50,60,70];b=40;a=_.indexOf(c,b,true);equals(a,1,"40 is in the list")});test("arrays: lastIndexOf",function(){var a=[1,0,1,0,0,1,0,0,0];a.lastIndexOf=null;equals(_.lastIndexOf(a,1),5,"can compute lastIndexOf, even without the native function");equals(_.lastIndexOf(a,0),8,"lastIndexOf the other element");var b=(function(){return _.lastIndexOf(arguments,1)})(1,0,1,0,0,1,0,0,0);equals(b,5,"works on an arguments object");equals(_.indexOf(null,2),-1,"handles nulls properly")});test("arrays: range",function(){equals(_.range(0).join(""),"","range with 0 as a first argument generates an empty array");equals(_.range(4).join(" "),"0 1 2 3","range with a single positive argument generates an array of elements 0,1,2,...,n-1");equals(_.range(5,8).join(" "),"5 6 7","range with two arguments a &amp; b, a&lt;b generates an array of elements a,a+1,a+2,...,b-2,b-1");equals(_.range(8,5).join(""),"","range with two arguments a &amp; b, b&lt;a generates an empty array");equals(_.range(3,10,3).join(" "),"3 6 9","range with three arguments a &amp; b &amp; c, c &lt; b-a, a &lt; b generates an array of elements a,a+c,a+2c,...,b - (multiplier of a) &lt; c");equals(_.range(3,10,15).join(""),"3","range with three arguments a &amp; b &amp; c, c &gt; b-a, a &lt; b generates an array with a single element, equal to a");equals(_.range(12,7,-2).join(" "),"12 10 8","range with three arguments a &amp; b &amp; c, a &gt; b, c &lt; 0 generates an array of elements a,a-c,a-2c and ends with the number not less than b");equals(_.range(0,-10,-1).join(" "),"0 -1 -2 -3 -4 -5 -6 -7 -8 -9","final example in the Python docs")})});